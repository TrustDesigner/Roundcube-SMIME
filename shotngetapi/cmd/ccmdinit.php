<?php/** * Shotngetapi / CCmdInit * * shotngetapi is used to perform communication between a client and a smartphone with SHOTNGET application * Copyright (C) 2007-2014 Trust Designer, Gallet Kévin * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. */if(isset($init_flag) == false)	die;	/*** This comand ask a web account formated using a file template.* Have to specifiate type & password size.**/class CCmdInit extends CCmd {	// ********************************************************************************************	private $imei;	private $model;	private $os;	private $cert;	private $kpub;	private $lang;	private $country;	private $debug;		// ********************************************************************************************	/**	* Initalize the comand	*/	public function __construct() {		parent::setValue(CCmd::CMD_INIT);				CDebugger::$debug->tracein('__construct', 'CCmdInit');		CDebugger::$debug->traceout(true);	}		public function fromXml($node){		CDebugger::$debug->tracein('fromXml', 'CCmdInit');				$this->imei = $this->getXmlUTF8($node, 'IMEI');		$this->model = $this->getXmlUTF8($node, 'MODEL');		$this->debug = $this->getXmlUTF8($node, 'DEBUG');		$this->os = $this->getXmlUTF8($node, 'OS');		$this->cert = $this->getXmlUTF8($node, 'CERT');		$this->kpub = $this->getXmlUTF8($node, 'KPUB');		$this->lang = $this->getXmlUTF8($node, 'LANG');		$this->country = $this->getXmlUTF8($node, 'COUNTRY');						CDebugger::$debug->traceout(true);	}		// ********************************************************************************************	public function serializer(&$dom, $kpub){		CDebugger::$debug->tracein('serializer', 'CCmdInit');				$xmlCmd = $dom->createElement('CMD');		$xmlCmd->setAttribute('VALUE', parent::getValue());				$this->setXmlUTF8($xmlCmd, 'IMEI', $this->getImei());		$this->setXmlUTF8($xmlCmd, 'MODEL', $this->getModel());		$this->setXmlUTF8($xmlCmd, 'DEBUG', $this->getDebug());		$this->setXmlUTF8($xmlCmd, 'OS', $this->getOs());		$this->setXmlUTF8($xmlCmd, 'CERT', $this->getCert());		$this->setXmlUTF8($xmlCmd, 'KPUB', $this->getKpub());		$this->setXmlUTF8($xmlCmd, 'LANG', $this->getLang());		$this->setXmlUTF8($xmlCmd, 'COUNTRY', $this->getCountry());				CDebugger::$debug->traceout(true);		return $xmlCmd;	}		// ********************************************************************************************	public function getImei() { return $this->imei; }	public function setImei($imei) { $this->imei = $imei; }		public function getOs() { return $this->os; }	public function setOs($os) { $this->os = $os; }		public function getModel() { return $this->model; }	public function setModel($model) { $this->model = $model; }		public function getCert() { return $this->cert; }	public function setCert($cert) { $this->cert = $cert; }		public function getKpub() { return $this->kpub; }	public function setKpub($kpub) { $this->kpub = $kpub; }		public function getCountry() { return $this->country; }	public function setCountry($country) { $this->country = $country; }		public function getLang() { return $this->lang; }	public function setLang($lang) { $this->lang = $lang; }		public function getDebug() { return $this->debug; }	public function setDebug($debug) { $this->debug = $debug; }}?>